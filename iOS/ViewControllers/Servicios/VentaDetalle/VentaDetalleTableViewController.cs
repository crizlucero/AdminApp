// This file has been autogenerated from a class added in the UI designer.

using System;
using UIKit;
using System.Collections.Generic;
using BigTed;
using WorklabsMx.iOS.Models;
using WorklabsMx.Controllers;
using WorklabsMx.Models;
using Foundation;
using System.Threading.Tasks;
//using PerpetualEngine.Storage;
using WorklabsMx.iOS.Helpers;
using WorklabsMx.Enum;
using WorklabsMx.Handlers;

namespace WorklabsMx.iOS
{
	public partial class VentaDetalleTableViewController : UITableViewController
	{
		public VentaDetalleTableViewController (IntPtr handle) : base (handle)
		{
		}


        public List<CarritoCompras> PreordenProductos = new List<CarritoCompras>();
        PickerItemsController controller;
        List<CarritoComprasDetalle> ProductosMembresias = null;

        NSMutableArray PreordenProducto = new NSMutableArray();

        const string IdentificadorCeldaHeader = "HeaderDetalleVenta";
        const string IdentificadorCeldaBody = "CuerpoDetalleVenta";
        const string IdentificadorCeldaNoInfo = "NoInfoDetalleVenta";

        const int TamañoHeader = 144;
        const int TamañoCeldaProductos = 136;
        const int TamañoMensajeNoInfo = 400;

        bool isShowInformation = false;
        bool existeConeccion = true;

        Double Subtotal = 0.00, Impuesto = 0.00, Total = 0.00;
        PromocionModel datosDescuento;

        //SimpleStorage Storage;
        OrdenVentaController ordenventa = new OrdenVentaController();

        bool VentaRealizada = false;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            //Storage = SimpleStorage.EditGroup("Login");
            controller = new PickerItemsController();
            datosDescuento = new PromocionModel();


        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            this.NavigationController.NavigationBarHidden = false;
            if (Helpers.InternetConectionHelper.VerificarConexion())
            {
                ProductosMembresias = new List<CarritoComprasDetalle>();
                foreach (CarritoCompras currentProduct in PreordenProductos)
                {
                    ProductosMembresias.AddRange(controller.GetProductosMembresias(currentProduct.Tipo, currentProduct.Id, currentProduct.Cantidad, currentProduct.Meses, currentProduct.FechaInicio, currentProduct.ListaPrecioId, currentProduct.MonedaId, currentProduct.ImpuestoId, currentProduct.DescuentoId));
                }

            }
            else
            {
                existeConeccion = false;
            }
        }

        public override UIView GetViewForHeader(UITableView tableView, nint section)
        {
            this.Subtotal = 0;
            this.Total = 0;
            this.Impuesto = 0;
            var headerCell = (VentaDetalleHeader)tableView.DequeueReusableCell(IdentificadorCeldaHeader);
            ordenventa.empresa_miembro_id = KeyChainHelper.GetKey("Usuario_Id");
            ordenventa.moneda_id = "1";
            ordenventa.impuesto_id = "1";
            ordenventa.folio = "FWL-38";
            foreach(CarritoComprasDetalle ProductoMembresia in ProductosMembresias)
            {
                this.Subtotal = this.Subtotal + double.Parse(ProductoMembresia.Carrito_Compras_Detalle_Importe_Suma);
                this.Total = this.Total + double.Parse(ProductoMembresia.Carrito_Compras_Detalle_Importe_Suma) * 1.16;
                ordenventa.suma = ordenventa.suma + int.Parse(ProductoMembresia.Carrito_Compras_Detalle_Cantidad);
            }
            this.Impuesto = Subtotal * 0.16;
            if (this.datosDescuento.Descuento_Id != null)
            {
                var descuento = (Subtotal * (double)this.datosDescuento.Descuento_Porcentaje);
                descuento = descuento * 1.16;
                ordenventa.descuento = descuento.ToString();
                ordenventa.porcentajeDecuento = (this.datosDescuento.Descuento_Porcentaje * 100).ToString();
                ordenventa.descuento_id = this.datosDescuento.Descuento_Id;
            }
            else 
            {
                ordenventa.descuento = "0";
                ordenventa.porcentajeDecuento = "0";
                ordenventa.descuento_id = "0";
            }
            headerCell.UpdateCell(this.Subtotal, this.Impuesto, this.Total, this.datosDescuento);
            ordenventa.pagado = "0";
            ordenventa.facturado = "0";
            ordenventa.subTotal = this.Subtotal.ToString();
            ordenventa.total = this.Total.ToString();
            ordenventa.impuesto = this.Impuesto.ToString();
            ordenventa.estatus = "1";
            return headerCell;
        }


        public override nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
            return TamañoHeader;
        }


        public override nint RowsInSection(UITableView tableView, nint section)
        {
            if (PreordenProductos.Count > 0)
            {
                isShowInformation = true;
                return PreordenProductos.Count;
            }
            isShowInformation = false;
            return 1;
        }

        public override nfloat GetHeightForRow(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            if (isShowInformation)
            {
                return TamañoCeldaProductos;
            }
            else
            {
                return TamañoMensajeNoInfo;
            }
        }

        public override UITableViewCell GetCell(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            if (isShowInformation)
            {
                var currentProduct = PreordenProductos[indexPath.Row];
                //membresias.AddRange(controller.GetProductosMembresias(currentProduct.Tipo, currentProduct.Id, currentProduct.Cantidad, currentProduct.Meses, currentProduct.FechaInicio, currentProduct.ListaPrecioId, currentProduct.MonedaId, currentProduct.ImpuestoId, currentProduct.DescuentoId));
                var currentProductCell = (CeldaVentaDetalle)tableView.DequeueReusableCell(IdentificadorCeldaBody, indexPath);
                currentProductCell.UpdateCell(currentProduct);
                this.WillDisplay(indexPath.Row);
                return currentProductCell;
            }
            else
            {
                BTProgressHUD.Dismiss();
                var noPostCell = (CeldaNoDetalleVenta)tableView.DequeueReusableCell(IdentificadorCeldaNoInfo, indexPath);
                noPostCell.UpdateCell(this.existeConeccion);
                return noPostCell;
            }
        }

        public override void RowSelected(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            var currentProduct = PreordenProductos[indexPath.Row];
            this.PerformSegue("detallecompra", currentProduct);
        }

        private void WillDisplay(int Row)
        {
            int LastRow = PreordenProductos.Count - 1;
            if ((Row == LastRow))
            {
                BTProgressHUD.Dismiss();
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, Foundation.NSObject sender)
        {
            if (segue.Identifier == "canjearcupon")
            {
                var vistaCupon = (CanjearCuponController)segue.DestinationViewController;
                vistaCupon.datosDescuentoDelegate = this;
            }
            else if (segue.Identifier == "detallecompra")
            {
                var detalleCompra = (DetalleVentaViewController)segue.DestinationViewController;
                detalleCompra.Venta = (CarritoCompras)sender;
            }
        }


        partial void btnAtras_Touch(UIBarButtonItem sender)
        {
            var ConfirmarCompra = UIAlertController.Create("Confirmar compra", "¿Proceder a pagar?", UIAlertControllerStyle.Alert);
            ConfirmarCompra.AddAction(UIAlertAction.Create("Aceptar", UIAlertActionStyle.Default, ((UIAlertAction obj) =>
            {
                var Encabezado = this.CrearEncabezado();
                var VentaDetalle = CrearVentaDetalle(Encabezado);

                new PagosHandler().InsertData(Encabezado, VentaDetalle);

                EjemploPagos objPagos = new EjemploPagos();
                objPagos.Pagar(this, ordenventa, ProductosMembresias);
            })));
            ConfirmarCompra.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Default, null));
            this.PresentViewController(ConfirmarCompra, true, null);
        }


        private OrdenVentaEncabezado CrearEncabezado()
        {
            OrdenVentaEncabezado encabezado = new OrdenVentaEncabezado
            {
                Usuario_Id = Convert.ToInt32(KeyChainHelper.GetKey("Usuario_Id")),
                Moneda_Id = 1,
                Impuesto_Id = 1,
                Descuento_Id = Convert.ToInt32(ordenventa.descuento_id),
                Folio = "OWL-",
                Importe_Suma = decimal.Parse(Subtotal.ToString()) - decimal.Parse(ordenventa.descuento),
                Porcentaje_Descuento = this.datosDescuento.Descuento_Porcentaje,
                Importe_Descuento = decimal.Parse(ordenventa.descuento),
                Importe_Subtotal = decimal.Parse(ordenventa.subTotal),
                Importe_Impuesto = decimal.Parse(ordenventa.total) - (decimal.Parse(ordenventa.subTotal) - decimal.Parse(ordenventa.descuento)), //IVATotal,
                Importe_Total = decimal.Parse(ordenventa.total),
                Importe_Pagado = 0,
                Importe_Facturado = 0,
                Promocion_Id = Convert.ToInt32(ordenventa.descuento_id)
            };
            return encabezado;
        }

        private List<OrdenVentaDetalle> CrearVentaDetalle(OrdenVentaEncabezado encabezado)
        {
            List<OrdenVentaDetalle> detalles = new List<OrdenVentaDetalle>();

            ProductosMembresias.ForEach(ProductoMembresia =>
            {
                if (ProductoMembresia.Carrito_Compras_Detalle_Cantidad != "0")
                {
                    detalles.Add(new OrdenVentaDetalle
                    {
                        Orden_Venta_Encabezado_Id = encabezado.Orden_Venta_Encabezado_Id,
                        Membresia_Id = ProductoMembresia.Membresia_Id,
                        Inscripcion_Membresia_Id = ProductoMembresia.Inscripcion_Membresia_Id,
                        Lista_Precio_Membresia_Id = ProductoMembresia.Lista_Precio_Membresia_Id,
                        Producto_Id = ProductoMembresia.Producto_Id,
                        Lista_Precio_Producto_Id = ProductoMembresia.Lista_Precio_Producto_Id,
                        Orden_Venta_Detalle_Descripcion = ProductoMembresia.Carrito_Compras_Detalle_Descripcion,
                        Orden_Venta_Detalle_Cantidad = Convert.ToInt32(ProductoMembresia.Carrito_Compras_Detalle_Cantidad),
                        Orden_Venta_Detalle_Importe_Precio = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Precio),
                        Orden_Venta_Detalle_Importe_Prorrateo = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Prorrateo),
                        Orden_Venta_Detalle_Importe_Suma = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Suma),
                        Orden_Venta_Detalle_Importe_Descuento = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Descuento),
                        Orden_Venta_Detalle_Importe_Subtotal = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Subtotal),
                        Orden_Venta_Detalle_Importe_Impuesto = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Impuesto),
                        Orden_Venta_Detalle_Importe_Total = Convert.ToDecimal(ProductoMembresia.Carrito_Compras_Detalle_Importe_Total),
                        Tipos_Servicios = ProductoMembresia.Tipo 
                    });
                }
            });

            return detalles;

        }

        partial void btnPagar_Touch(UIBarButtonItem sender)
        {
            this.NavigationController.PopViewController(true);
        }
    }


    partial  class VentaDetalleTableViewController : DescuentoAplicadoDel
    {
        public async void DescuentoAplicado(PromocionModel datosDescuento)
        {
            BTProgressHUD.Show("Aplicando descuento");
            await Task.Delay(500);
            this.datosDescuento = datosDescuento;
            ProductosMembresias = new List<CarritoComprasDetalle>();
            this.TableView.ReloadData();
        }
    }

}
