// This file has been autogenerated from a class added in the UI designer.

using System;
using UIKit;
using System.Collections.Generic;
using BigTed;
using WorklabsMx.iOS.Models;
using WorklabsMx.Controllers;
using WorklabsMx.Models;
using WorklabsMx.Enum;
using Foundation;

namespace WorklabsMx.iOS
{
	public partial class VentaDetalleTableViewController : UITableViewController
	{
		public VentaDetalleTableViewController (IntPtr handle) : base (handle)
		{
		}

        public List<CarritoCompras> PreordenProductos = new List<CarritoCompras>();
        PickerItemsController controller;
        List<CarritoComprasDetalle> membresias = null, productos = null;

        NSMutableArray PreordenProducto = new NSMutableArray();

        const string IdentificadorCeldaHeader = "HeaderDetalleVenta";
        const string IdentificadorCeldaBody = "CuerpoDetalleVenta";
        const string IdentificadorCeldaNoInfo = "NoInfoDetalleVenta";

        const int TamañoHeader = 133;
        const int TamañoCeldaProductos = 136;
        const int TamañoMensajeNoInfo = 400;

        bool isShowInformation = false;
        bool existeConeccion = true;

        Double Subtotal = 0.00, Impuesto = 0.00, Total = 0.00;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            controller = new PickerItemsController();
            productos = new List<CarritoComprasDetalle>();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            membresias = new List<CarritoComprasDetalle>();
        }

        public override UIView GetViewForHeader(UITableView tableView, nint section)
        {
            var headerCell = (VentaDetalleHeader)tableView.DequeueReusableCell(IdentificadorCeldaHeader);
            foreach(CarritoComprasDetalle membresia in membresias)
            {
                this.Subtotal = this.Subtotal + double.Parse(membresia.Carrito_Compras_Detalle_Importe_Suma);
                this.Total = this.Total + double.Parse(membresia.Carrito_Compras_Detalle_Importe_Suma) * 1.16;
            }
            this.Impuesto = Subtotal * 0.16;
            headerCell.UpdateCell(this.Subtotal, this.Impuesto, this.Total);
            return headerCell;
        }


        public override nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
            return TamañoHeader;
        }


        public override nint RowsInSection(UITableView tableView, nint section)
        {
            if (PreordenProductos.Count > 0)
            {
                isShowInformation = true;
                return PreordenProductos.Count;
            }
            isShowInformation = false;
            return 1;
        }

        public override nfloat GetHeightForRow(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            if (isShowInformation)
            {
                return TamañoCeldaProductos;
            }
            else
            {
                return TamañoMensajeNoInfo;
            }
        }

        public override UITableViewCell GetCell(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            if (isShowInformation)
            {
                var currentProduct = PreordenProductos[indexPath.Row];
                membresias.AddRange(controller.GetProductosMembresias(currentProduct.Tipo, currentProduct.Id, currentProduct.Cantidad, currentProduct.Meses, currentProduct.FechaInicio, currentProduct.ListaPrecioId, currentProduct.MonedaId, currentProduct.ImpuestoId, currentProduct.DescuentoId));
                var currentProductCell = (CeldaVentaDetalle)tableView.DequeueReusableCell(IdentificadorCeldaBody, indexPath);
                currentProductCell.UpdateCell(currentProduct);
                this.WillDisplay(indexPath.Row);
                return currentProductCell;
            }
            else
            {
                BTProgressHUD.Dismiss();
                var noPostCell = (CeldaNoDetalleVenta)tableView.DequeueReusableCell(IdentificadorCeldaNoInfo, indexPath);
                noPostCell.UpdateCell(this.existeConeccion);
                return noPostCell;
            }
        }

        public override void RowSelected(UITableView tableView, Foundation.NSIndexPath indexPath)
        {
            var currentProduct = PreordenProductos[indexPath.Row];
            this.PerformSegue("detallecompra", currentProduct);
        }

        private void WillDisplay(int Row)
        {
            int LastRow = PreordenProductos.Count - 1;
            if ((Row == LastRow))
            {
                BTProgressHUD.Dismiss();
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, Foundation.NSObject sender)
        {
            if (segue.Identifier == "canjearcupon")
            {

            }
            else if (segue.Identifier == "detallecompra")
            {
                var detalleCompra = (DetalleVentaViewController)segue.DestinationViewController;
                detalleCompra.Venta = (CarritoCompras)sender;
            }
        }

        partial void btnAtras(UIBarButtonItem sender)
        {
            this.NavigationController.PopViewController(true);
        }

	}
}
